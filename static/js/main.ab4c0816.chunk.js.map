{"version":3,"sources":["components/ui-component/TextField/TextField.js","components/ui-component/Button/Button.js","components/pages/LoginPage/LoginPage.js","components/pages/CreatePage/CreatePage.js","components/pages/UpdatePage/UpdatePage.js","components/pages/TasksPage/TasksPage.js","App.js","reducers/tasks.js","reducers/login.js","reducers/index.js","index.js","assets/muiTheme.js","store/configureStore.js","actions/login.js","actions/tasks.js","api/apiClient.js","api/Base.js","api/Tasks.js","api/Login.js","apiSingleton.js","api/index.js"],"names":["ExtendedTextField","this","props","variant","className","error","style","value","rest","classNames","TextField","InputProps","classes","root","focused","FormHelperTextProps","PureComponent","defaultProps","ExtendedButton","color","Button","target","connect","state","login","LoginActions","useState","username","password","userData","setUserData","isLogin","setIsLogin","err","setErrors","handleChange","key","onError","placeholder","fullWidth","onChange","useCallback","e","helperText","type","onClick","a","async","size","TasksActions","initialData","email","text","taskData","setTaskData","isCreate","setIsCreate","createTask","handleToggleCreate","getTasks","page","sort_field","sort_direction","task","isUpdate","setIsUpdate","status","select","label","map","MenuItem","updateTask","id","handleToggleUpdate","TasksPage","isLoading","handleChangePage","setState","selected","handelLogout","logout","handleSort","renderHeader","FilterList","FormatAlignCenter","renderTasks","tasks","totalCount","pageCount","Math","ceil","previousLabel","pageRangeDisplayed","nextLabel","onPageChange","initialPage","pageClassName","previousClassName","nextClassName","activeClassName","breakClassName","containerClassName","disableInitialCallback","App","checkSession","Component","initialState","combineReducers","action","SUCCESS_GET_TASKS","LOGIN","LOGOUT","theme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","typography","body1","subheading","button","textTransform","store","composeEnhancers","compose","createStore","rootReducer","applyMiddleware","thunkMiddleware","configureStore","mountApp","NextApp","require","default","ReactDOM","render","document","getElementById","data","dispatch","api","response","token","message","localStorage","setItem","getItem","console","log","params","total_task_count","onSuccess","ApiClient","prefix","requestUrl","request","url","method","body","formData","FormData","name","append","isFormData","headers","signal","init","getFormData","newParams","param","fetch","json","Error","warn","Base","apiClient","TasksAPI","get","post","LoginAPI","apiFactory","apiPrefix"],"mappings":"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","file":"static/js/main.ab4c0816.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport TextField from '@material-ui/core/TextField';\n\nimport './TextField.css';\n\nclass ExtendedTextField extends PureComponent {\n    static propTypes = {\n        variant: PropTypes.string,\n        className: PropTypes.string,\n        error: PropTypes.bool,\n        style: PropTypes.string,\n        value: PropTypes.string,\n    }\n\n    static defaultProps = {\n        variant: 'outlined',\n        style: '',\n        className: '',\n        error: false,\n        value: '',\n    }\n\n    render() {\n        const {\n            variant,\n            className,\n            error,\n            style,\n            value,\n            ...rest\n        } = this.props;\n\n        return (\n            <div className={classNames('wrapper', `${className}`)}>\n                <TextField\n                    variant={variant}\n                    className={'input'}\n                    InputProps={{\n                        classes: {\n                            root: classNames('root', { 'error': error }, style),\n                            focused: 'inputFocused'\n                        },\n                    }}\n                    FormHelperTextProps={{\n                        classes: {\n                            root: 'helperTextRoot'\n                        }\n                    }}\n                    value={value}\n                    {...rest}\n                />\n            </div>\n        );\n    }\n}\n\nexport default ExtendedTextField;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\n\nimport './Button.css';\n\nfunction ExtendedButton({\n    variant,\n    color,\n    classes,\n    ...rest\n}) {\n    return (\n        <Button\n            classes={{\n                root: 'Button'\n            }}\n            variant={variant}\n            color={color}\n            target='_blank'\n            {...rest}\n        />\n    );\n}\n\nExtendedButton.propTypes = {\n    variant: PropTypes.string,\n    color: PropTypes.string,\n    classes: PropTypes.object\n};\n\nExtendedButton.defaultProps = {\n    variant: 'contained',\n    color: 'default',\n    classes: {}\n};\n\nexport default ExtendedButton;\n","import React, { useState, useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Progress from '@material-ui/core/CircularProgress';\nimport TextField from '../../ui-component/TextField';\nimport Button from '../../ui-component/Button';\n\nimport * as LoginActions from '../../../actions/login';\n\nimport './LoginPage.css';\n\nfunction LoginPage(props) {\n\n    const [userData, setUserData] = useState({\n        username: '',\n        password: ''\n    });\n\n    const [isLogin, setIsLogin] = useState(false)\n\n    const [err, setErrors] = useState({\n        username: '',\n        password: ''\n    });\n\n    function handleChange(key, value) {\n        setUserData({ ...userData, [key]: value });\n        setErrors({ ...err, [key]: '' });\n    }\n\n    function onError(err) {\n        setErrors({ ...err });\n    }\n\n    async function handleSubmit() {\n        setIsLogin(true)\n        await props.login(userData, onError)\n        setIsLogin(false)\n    }\n\n    return (\n        <div className={'pageWrapper'}>\n            <div className={'inputBlock'}>\n                <TextField\n                    placeholder={'Username'}\n                    fullWidth\n                    value={userData.username}\n                    className={'input'}\n                    onChange={useCallback(e => handleChange('username', e.target.value))}\n                    error={!!err.username}\n                    helperText={err.username}\n                />\n                <TextField\n                    type='password'\n                    placeholder={'Password'}\n                    fullWidth\n                    value={userData.password}\n                    className={'input'}\n                    onChange={useCallback(e => handleChange('password', e.target.value))}\n                    error={!!err.password}\n                    helperText={err.password}\n                />\n                <Button\n                    color='secondary'\n                    fullWidth\n                    className={'input'}\n                    onClick={handleSubmit}\n                >\n                    {isLogin ? <Progress size={35} /> : 'Login'}\n                </Button>\n            </div>\n        </div>\n    );\n}\n\nLoginPage.propTypes = {\n    login: PropTypes.func.isRequired\n};\n\nexport default connect(state => { return { login: state.login } }, { ...LoginActions })(LoginPage);\n","import React, { useState, useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Progress from '@material-ui/core/CircularProgress';\nimport TextField from '../../ui-component/TextField';\nimport Button from '../../ui-component/Button';\n\nimport * as TasksActions from '../../../actions/tasks';\n\nimport './CreatePage.css';\n\nfunction CreatePage(props) {\n    const initialData = {\n        username: '',\n        email: '',\n        text: ''\n    };\n    const [taskData, setTaskData] = useState(initialData);\n\n    const [isCreate, setIsCreate] = useState(false)\n\n    const [err, setErrors] = useState(initialData);\n\n    function handleChange(key, value) {\n        setTaskData({ ...taskData, [key]: value });\n        setErrors({ ...err, [key]: '' });\n    }\n\n    function onError(err) {\n        setErrors({ ...err });\n    }\n\n    async function handleSubmit() {\n        setIsCreate(true);\n        await props.createTask(taskData, onError, props.handleToggleCreate);\n        await props.getTasks({ page: props.page, sort_field: props.sort_field, sort_direction: props.sort_direction });\n        setIsCreate(false);\n    }\n\n    return (\n        <div className={'createPageWrapper'}>\n            <div className={'inputBlock'}>\n                <TextField\n                    placeholder={'Username'}\n                    fullWidth\n                    value={taskData.username}\n                    className={'input'}\n                    onChange={useCallback(e => handleChange('username', e.target.value))}\n                    error={!!err.username}\n                    helperText={err.username}\n                />\n                <TextField\n                    type='email'\n                    placeholder={'Email'}\n                    fullWidth\n                    value={taskData.email}\n                    className={'input'}\n                    onChange={useCallback(e => handleChange('email', e.target.value))}\n                    error={!!err.email}\n                    helperText={err.email}\n                />\n                <TextField\n                    placeholder={'Text'}\n                    fullWidth\n                    value={taskData.text}\n                    className={'input'}\n                    onChange={useCallback(e => handleChange('text', e.target.value))}\n                    error={!!err.text}\n                    helperText={err.text}\n                />\n                <Button\n                    color='secondary'\n                    fullWidth\n                    className={'input'}\n                    onClick={handleSubmit}\n                >\n                    {isCreate ? <Progress size={35} /> : 'Create'}\n                </Button>\n            </div>\n        </div>\n    );\n}\n\nCreatePage.propTypes = {\n    createTask: PropTypes.func.isRequired,\n    page: PropTypes.number.isRequired,\n    sort_field: PropTypes.string.isRequired,\n    sort_direction: PropTypes.string.isRequired,\n    getTasks: PropTypes.func.isRequired,\n    handleToggleCreate: PropTypes.func.isRequired\n};\n\nexport default connect(() => { return {} }, { ...TasksActions })(CreatePage);\n","import React, { useState, useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Progress from '@material-ui/core/CircularProgress';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '../../ui-component/TextField';\nimport Button from '../../ui-component/Button';\n\nimport * as TasksActions from '../../../actions/tasks';\n\nimport './UpdatePage.css';\n\nfunction UpdatePage(props) {\n    const initialData = {\n        status: '',\n        text: ''\n    };\n\n    const statuses = [\n        { label: 'Fulfilled', value: 10 },\n        { label: 'Unfulfilled', value: 0 }\n    ];\n\n    const [taskData, setTaskData] = useState(props.task);\n\n    const [isUpdate, setIsUpdate] = useState(false)\n\n    const [err, setErrors] = useState(initialData);\n\n    function handleChange(key, value) {\n        setTaskData({ ...taskData, [key]: value });\n        setErrors({ ...err, [key]: '' });\n    }\n\n    function onError(err) {\n        setErrors({ ...err });\n    }\n\n    async function handleSubmit() {\n        setIsUpdate(true);\n        await props.updateTask(props.task.id, taskData, onError, props.handleToggleUpdate);\n        await props.getTasks({ page: props.page, sort_field: props.sort_field, sort_direction: props.sort_direction });\n        setIsUpdate(false);\n    }\n\n    return (\n        <div className={'UpdatePageWrapper'}>\n            <div className={'inputBlock'}>\n                <TextField\n                    placeholder={'Status'}\n                    fullWidth\n                    type='number'\n                    select\n                    value={taskData.status}\n                    className={'input'}\n                    onChange={useCallback(e => handleChange('status', e.target.value))}\n                    error={!!err.status}\n                    helperText={err.status}\n                >\n                    {statuses.map(status => (\n                        <MenuItem key={status.value} value={status.value}>\n                            {status.label}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                    placeholder={'Text'}\n                    fullWidth\n                    value={taskData.text}\n                    className={'input'}\n                    onChange={useCallback(e => handleChange('text', e.target.value))}\n                    error={!!err.text}\n                    helperText={err.text}\n                />\n                <Button\n                    color='secondary'\n                    fullWidth\n                    className={'input'}\n                    onClick={handleSubmit}\n                >\n                    {isUpdate ? <Progress size={35} /> : 'Update'}\n                </Button>\n            </div>\n        </div >\n    );\n}\n\nUpdatePage.propTypes = {\n    updateTask: PropTypes.func.isRequired,\n    task: PropTypes.object.isRequired,\n    page: PropTypes.number.isRequired,\n    sort_field: PropTypes.string.isRequired,\n    sort_direction: PropTypes.string.isRequired,\n    getTasks: PropTypes.func.isRequired,\n    handleToggleUpdate: PropTypes.func.isRequired\n};\n\nexport default connect(() => { return {} }, { ...TasksActions })(UpdatePage);\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ReactPaginate from 'react-paginate';\nimport Progress from '@material-ui/core/CircularProgress';\nimport { FormatAlignCenter, FilterList } from '@material-ui/icons';\nimport CreatePage from '../CreatePage';\nimport UpdatePage from '../UpdatePage';\nimport Button from '../../ui-component/Button';\n\nimport * as TasksActions from '../../../actions/tasks';\nimport * as LoginActions from '../../../actions/login';\n\nimport './TasksPage.css';\n\nclass TasksPage extends PureComponent {\n    static propTypes = {\n        tasks: PropTypes.array.isRequired,\n        totalCount: PropTypes.number.isRequired,\n        getTasks: PropTypes.func.isRequired\n    }\n\n    state = {\n        isLoading: true,\n        isCreate: false,\n        isUpdate: false,\n        page: 0,\n        task: { id: '' },\n        sort_field: 'id',\n        sort_direction: 'asc'\n    }\n\n    async componentDidMount() {\n        await this.setState({ isLoading: true });\n        await this.props.getTasks({ page: this.state.page, sort_field: this.state.sort_field, sort_direction: this.state.sort_direction });\n        await this.setState({ isLoading: false });\n    }\n\n    handleChangePage = async (page) => {\n        await this.setState({ isLoading: true, page: page.selected + 1 });\n        await this.props.getTasks({ page: this.state.page, sort_field: this.state.sort_field, sort_direction: this.state.sort_direction });\n        await this.setState({ isLoading: false });\n    }\n\n    handelLogout = async () => {\n        await this.props.logout();\n    }\n\n    handleToggleCreate = async () => {\n        await this.setState({ isCreate: !this.state.isCreate });\n    }\n\n    handleToggleUpdate = task => async () => {\n        await this.setState({ task, isUpdate: !this.state.isUpdate });\n    }\n\n\n    handleSort = sort_field => async e => {\n        await this.setState({\n            sort_field,\n            sort_direction: this.state.sort_direction === 'asc' ? 'desc' : 'asc',\n            isLoading: true,\n        });\n        await this.props.getTasks({ page: this.state.page, sort_field, sort_direction: this.state.sort_direction });\n        await this.setState({ isLoading: false });\n    }\n\n    renderHeader = () => {\n        const { sort_field, sort_direction } = this.state;\n\n        return (\n            <div className={'headerWrapper'} >\n                <div className={'header'} onClick={this.handleSort('id')}>\n                    ID {sort_field === 'id' ?\n                        <FilterList style={{\n                            'transform': `rotate(${sort_direction === 'asc' ? 0 : 180}deg)`,\n                            'marginLeft': '5px',\n                            'width': '15px',\n                            'height': '15px'\n                        }} />\n                        : <FormatAlignCenter style={{\n                            'marginLeft': '5px',\n                            'width': '15px',\n                            'height': '15px'\n                        }} />}\n                </div>\n                <div className={'header'} onClick={this.handleSort('username')}>\n                    User Name {sort_field === 'username' ?\n                        <FilterList style={{\n                            'transform': `rotate(${sort_direction === 'asc' ? 0 : 180}deg)`,\n                            'marginLeft': '5px',\n                            'width': '15px',\n                            'height': '15px'\n                        }} />\n                        : <FormatAlignCenter style={{\n                            'marginLeft': '5px',\n                            'width': '15px',\n                            'height': '15px'\n                        }} />}</div>\n                <div className={'header'} onClick={this.handleSort('email')}>\n                    Email {sort_field === 'email' ?\n                        <FilterList style={{\n                            'transform': `rotate(${sort_direction === 'asc' ? 0 : 180}deg)`,\n                            'marginLeft': '5px',\n                            'width': '15px',\n                            'height': '15px'\n                        }} />\n                        : <FormatAlignCenter style={{\n                            'marginLeft': '5px',\n                            'width': '15px',\n                            'height': '15px'\n                        }} />}</div>\n                <div className={classNames('header', 'notActive')}>\n                    Text\n                     </div>\n                <div className={'header'} onClick={this.handleSort('status')}>\n                    Status {sort_field === 'status' ?\n                        <FilterList style={{\n                            'transform': `rotate(${sort_direction === 'asc' ? 0 : 180}deg)`,\n                            'marginLeft': '5px',\n                            'width': '15px',\n                            'height': '15px'\n                        }} />\n                        : <FormatAlignCenter style={{\n                            'marginLeft': '5px',\n                            'width': '15px',\n                            'height': '15px'\n                        }} />}</div>\n            </div>\n        )\n    }\n    renderTasks = () => {\n        const { tasks, totalCount } = this.props;\n        const { isLoading, page } = this.state;\n\n        return (\n            <div className={'pageWrapper'}>\n                <div className={'taskPage'} >\n                    {this.renderHeader()}\n                    {isLoading ?\n                        <Progress size={35} /> :\n                        tasks && tasks.map(task => {\n                            return (\n                                <div className={'task'} key={task.id} onClick={this.handleToggleUpdate(task)}>\n                                    <div className={'taskName'}>{task.id}</div>\n                                    <div className={'taskName'}>{task.username}</div>\n                                    <div className={'taskName'}>{task.email}</div>\n                                    <div className={'taskName'}>{task.text}</div>\n                                    <div className={'taskName'}>{task.status ? 'Fulfilled' : 'Unfulfilled'}</div>\n                                </div>\n                            )\n                        })\n                    }\n                    <ReactPaginate\n                        pageCount={Math.ceil(totalCount / 3)}\n                        previousLabel={'Previous'}\n                        pageRangeDisplayed={3}\n                        nextLabel={'Next'}\n                        onPageChange={this.handleChangePage}\n                        initialPage={page}\n                        pageClassName={'page'}\n                        previousClassName={'button'}\n                        nextClassName={'button'}\n                        activeClassName={'active'}\n                        breakClassName={'page'}\n                        containerClassName='container'\n                        disableInitialCallback={true}\n                    />\n                </div>\n            </div>\n        )\n    }\n    render() {\n        const { isCreate, isUpdate, task, page, sort_field, sort_direction } = this.state\n\n        return (\n            <div>\n                <Button style={{ 'marginBottom': '30px', 'marginRight': '30px' }} onClick={this.handelLogout}>Logout</Button>\n                <Button style={{ 'marginBottom': '30px' }} onClick={this.handleToggleCreate}>{isCreate ? 'Back' : 'Create'}</Button>\n                {isCreate ?\n                    <CreatePage\n                        handleToggleCreate={this.handleToggleCreate}\n                        page={page}\n                        sort_field={sort_field}\n                        sort_direction={sort_direction}\n                        getTasks={this.props.getTasks}\n                    />\n                    :\n                    isUpdate ?\n                        <UpdatePage\n                            task={task}\n                            page={page}\n                            sort_field={sort_field}\n                            sort_direction={sort_direction}\n                            getTasks={this.props.getTasks}\n                            handleToggleUpdate={this.handleToggleUpdate(task)} />\n                        :\n                        this.renderTasks()\n                }\n            </div>\n        );\n    }\n}\n\nexport default connect(state => {\n    return {\n        tasks: state.tasks.tasks,\n        totalCount: state.tasks.totalCount\n    };\n}, { ...TasksActions, ...LoginActions })(TasksPage);\n","import React, { Component } from 'react';\nimport LoginPage from './components/pages/LoginPage';\nimport TaskPage from './components/pages/TasksPage';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as LoginActions from './actions/login';\n\nimport './App.css';\n\nclass App extends Component {\n\n  static propTypes = {\n    isLogin: PropTypes.bool.isRequired,\n  };\n\n  async componentDidMount() {\n    await this.props.checkSession()\n  }\n\n  render() {\n    const { isLogin } = this.props\n\n    return (\n      <div className=\"App\">\n        {isLogin ?\n          <TaskPage />\n          : <LoginPage />\n        }\n      </div>\n    );\n  }\n}\n\nexport default connect(state => {\n  return { isLogin: state.login.isLogin }\n}, { ...LoginActions })(App);\n","import {\n    SUCCESS_GET_TASKS\n} from '../actions/tasks';\n\nconst initialState = {\n    tasks: [],\n    totalCount: 0\n};\n\nexport default function tasks(state = initialState, action) {\n    const { type, tasks, totalCount } = action;\n\n    switch (type) {\n        case SUCCESS_GET_TASKS:\n            return { ...state, tasks, totalCount };\n        default:\n            return state;\n    }\n}\n","import { LOGIN, LOGOUT } from '../actions/login';\n\nconst initialState = {\n    isLogin: false\n};\n\nexport default function login(state = initialState, action) {\n    const { type } = action;\n\n    switch (type) {\n        case LOGIN:\n            return { ...state, isLogin: true };\n        case LOGOUT:\n            return { ...state, isLogin: false };\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux';\n\nimport tasks from './tasks';\nimport login from './login';\n\nexport default combineReducers({\n    tasks,\n    login\n});\n","import 'babel-polyfill';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { AppContainer } from 'react-hot-loader';\nimport { Provider } from 'react-redux';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport muiTheme from './assets/muiTheme';\nimport configureStore from './store/configureStore.js';\n\nconst theme = createMuiTheme(muiTheme);\nconst store = configureStore();\n\nfunction render(Component) {\n    ReactDOM.render(\n        <Provider store={store}>\n            <MuiThemeProvider theme={theme}>\n                <AppContainer>\n                    <Component />\n                </AppContainer>\n            </MuiThemeProvider>\n        </Provider>,\n        document.getElementById('root')\n    );\n}\n\nexport function mountApp() {\n    const NextApp = require('./App.js').default;\n\n    render(NextApp);\n}\n\nmountApp();\n\nif (module.hot) {\n    module.hot.accept('./App.js', () => mountApp());\n}\n\n","export default {\n    palette: {\n        primary: {\n            light       : '#31BFA5',\n            main        : '#31BFA5',\n            dark        : '#31BFA5',\n            contrastText: '#FFF'\n        },\n        secondary: {\n            light       : '#FFF',\n            main        : '#FFF',\n            dark        : '#FFF',\n            contrastText: '#000'\n        }\n    },\n    typography: {\n        body1: {\n            color: 'rgba(0,0,0,0.54)'\n        },\n        subheading: {\n            color: '#444444'\n        },\n        button: {\n            textTransform: 'capitalize'\n        }\n    }\n};\n","import { applyMiddleware, createStore, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nexport default function configureStore() {\n    const composeEnhancers = process.env.NODE_ENV !== 'production' ?\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose : // eslint-disable-line\n        compose;\n\n    const store = createStore(\n        rootReducer,\n        composeEnhancers(\n            applyMiddleware(thunkMiddleware)\n        )\n    );\n\n    if (module.hot) {\n        module.hot.accept('../reducers', () => {\n            const nextRootReducer = require('../reducers/index').default;\n\n            store.replaceReducer(nextRootReducer);\n        });\n    }\n\n    return store;\n}\n","import api from '../apiSingleton.js';\n\nexport const LOGIN = 'LOGIN';\nexport const LOGOUT = 'LOGOUT';\n\nexport function login(data, onError) {\n    return async dispatch => {\n        try {\n            const response = await api.login.login(data);\n            if (response.status === 'ok') {\n                const { message: { token } } = response\n\n                localStorage.setItem('token', token);\n\n                dispatch({\n                    type: LOGIN,\n                });\n            }\n\n        } catch (error) {\n            onError(error)\n        }\n    };\n}\n\nexport function logout() {\n    return dispatch => {\n        localStorage.setItem('token', '');\n\n        dispatch({ type: LOGOUT });\n    };\n}\n\nexport function checkSession() {\n    return dispatch => {\n        try {\n            const token = localStorage.getItem('token');\n\n            if (!token) {\n                return;\n            }\n\n            dispatch({\n                type: LOGIN,\n            });\n        } catch (err) {\n            console.log(err)\n        }\n    };\n}\n","\nimport api from '../apiSingleton';\n\nexport const SUCCESS_GET_TASKS = 'SUCCESS_GET_TASKS';\n\nexport function getTasks(params) {\n    return async dispatch => {\n        try {\n            const response = await api.tasks.getTasks(params);\n\n            if (response.status === 'ok') {\n                dispatch({\n                    type: SUCCESS_GET_TASKS,\n                    tasks: response.message.tasks,\n                    totalCount: +response.message.total_task_count\n                });\n            }\n\n        } catch (error) {\n            console.log(error)\n        }\n    };\n}\n\nexport function updateTask(id, data, onError, onSuccess ) {\n    return async dispatch => {\n        try {\n            await api.tasks.updateTask(id, data);\n            await onSuccess();\n        } catch (error) {\n            onError(error)\n        }\n    };\n}\n\nexport function createTask(data, onError, onSuccess) {\n    return async dispatch => {\n        try {\n            await api.tasks.createTask(data);\n            await onSuccess();\n        } catch (error) {\n            onError(error)\n        }\n    };\n}\n\n","export default class ApiClient {\n    constructor({ prefix = 'api/v1' } = {}) {\n        this.prefix = prefix;\n    }\n\n    get(requestUrl, params) {\n        return this.request({\n            url: requestUrl,\n            method: 'GET',\n            params\n        });\n    }\n\n    post(requestUrl, body = {}, params) {\n        return this.request({\n            url: requestUrl,\n            method: 'POST',\n            type: 'test',\n            body,\n            params\n        });\n    }\n\n    put(requestUrl, body = {}, params) {\n        return this.request({\n            url: requestUrl,\n            method: 'PUT',\n            body,\n            params\n        });\n    }\n\n    delete(requestUrl, body = {}, params) {\n        return this.request({\n            url: `${requestUrl}`,\n            method: 'DELETE',\n            body,\n            params\n        });\n    }\n\n    patch(requestUrl, body = {}, params) {\n        return this.request({\n            url: `${requestUrl}`,\n            method: 'PATCH',\n            body,\n            params\n        });\n    }\n\n    getFormData(data) {\n        const formData = new FormData();\n        const token = localStorage.getItem('token');\n        \n        for (const name in data) {\n            formData.append(name, data[name]);\n        }\n\n        formData.append('token', token);\n\n        return formData;\n    }\n\n    async request({ url, method, body, isFormData, headers, signal, type, params }) {\n        const init = {\n            method,\n            headers: headers || {\n                //...(!type ? { 'Content-Type': 'application/json' } : {}),\n                'Access-Control-Allow-Origin': '*',\n                'Access-Control-Allow-Credentials': true,\n            },\n            signal\n        };\n\n        if (body) {\n            init.body = this.getFormData(body);\n        }\n\n        let newParams = '';\n\n        if (params) {\n            for (const param in params) {\n                newParams = `${newParams}&&${param}=${params[param]}`\n            }\n        }\n\n        try {\n            const response = await fetch(`https://cors-anywhere.herokuapp.com/${this.prefix}${url}${newParams}`, init);\n            const data = await response.json();\n\n            if (response.status >= 400) {\n                throw new Error('Bad response from server');\n            }\n\n            if (data && data.status === 'ok') {\n                return data;\n            }\n\n            throw data.message;\n        } catch (err) {\n            console.warn('Unhandled exeption');\n            console.warn(err);\n            throw err;\n        }\n    }\n}\n","export default class Base {\n    constructor({ apiClient }) {\n        if (!apiClient) throw new Error('[apiClient] required');\n        this.apiClient = apiClient;\n    }\n}\n","import Base from './Base';\n\nexport default class TasksAPI extends Base {\n    getTasks(params) {\n        return this.apiClient.get(`?developer=admin`, params);\n    }\n\n    createTask(data) {\n        return this.apiClient.post(`create?developer=admin`, data)\n    }\n    \n    updateTask(id, data) {\n        return this.apiClient.post(`edit/${id}?developer=admin`, data)\n    }\n}\n\n","import Base from './Base';\n\nexport default class LoginAPI extends Base {\n  login(data) {\n    return this.apiClient.post('login?developer=admin', data);\n  }\n}\n","import apiFactory from './api';\n\nexport default apiFactory({\n  apiPrefix: 'https://uxcandy.com/~shapoval/test-task-backend/v2/'\n});\n","import ApiClient from './apiClient';\nimport TasksAPI from './Tasks';\nimport LoginAPI from './Login';\n\nexport default function ({ apiPrefix } = {}) {\n    if (!apiPrefix) {\n        throw new Error('[apiPrefix] required');\n    }\n\n    const api = new ApiClient({ prefix: apiPrefix });\n\n    return {\n        apiClient: api,\n        login: new LoginAPI({ apiClient: api }),\n        tasks: new TasksAPI({ apiClient: api }),\n    };\n}\n"],"sourceRoot":""}